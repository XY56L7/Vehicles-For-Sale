// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XY56L7_SOF_2022231.Data;

#nullable disable

namespace XY56L7_SOF_2022231.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240123144922_Motorcycle")]
    partial class Motorcycle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XY56L7_SOF_2022231.Models.Car", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Uid = "f3dc3f9c-afd6-46dd-9561-e17dba2f8b56",
                            OwnerId = "user1",
                            Title = "Phoenix 1"
                        },
                        new
                        {
                            Uid = "df80ef82-2d5d-456a-be36-1f04f6448644",
                            OwnerId = "user2",
                            Title = "Nebula 2"
                        },
                        new
                        {
                            Uid = "3045100d-d9b4-4e14-9a5b-ced1af130365",
                            OwnerId = "user3",
                            Title = "Quantum 3"
                        },
                        new
                        {
                            Uid = "a20df922-92e2-4f2b-9fc4-712fb38efe5a",
                            OwnerId = "user4",
                            Title = "Infinity 4"
                        },
                        new
                        {
                            Uid = "d5b0fd8c-fb09-4508-8943-24144e9da6a4",
                            OwnerId = "user5",
                            Title = "Pegasus 5"
                        },
                        new
                        {
                            Uid = "293d244a-88f2-4ef1-b3a1-bf6a9348a693",
                            OwnerId = "user6",
                            Title = "Aurora 6"
                        },
                        new
                        {
                            Uid = "9b7cce93-d081-4e93-bcd6-4457b076b33a",
                            OwnerId = "user7",
                            Title = "Raptor 7"
                        },
                        new
                        {
                            Uid = "98eeb3f5-b70a-4cf3-8def-2bb5af6c984e",
                            OwnerId = "user8",
                            Title = "Zenith 8"
                        },
                        new
                        {
                            Uid = "cfb20bc7-5d7f-4ed3-9fb9-99858ea71b52",
                            OwnerId = "user9",
                            Title = "Vortex 9"
                        },
                        new
                        {
                            Uid = "4125a4c2-813e-4f36-819e-3f683e031e1d",
                            OwnerId = "user10",
                            Title = "Spectra 10"
                        },
                        new
                        {
                            Uid = "ea06d6e5-06f3-4f65-9d14-123b727a69c4",
                            OwnerId = "user11",
                            Title = "Phoenix 11"
                        },
                        new
                        {
                            Uid = "a900632f-de6c-4adc-b8b7-74d3d78f7438",
                            OwnerId = "user12",
                            Title = "Nebula 12"
                        },
                        new
                        {
                            Uid = "ae39701b-3063-454d-86a5-34dd1ab935dc",
                            OwnerId = "user13",
                            Title = "Quantum 13"
                        },
                        new
                        {
                            Uid = "68e099e4-c7c0-4282-8ec4-a2ace8c780e3",
                            OwnerId = "user14",
                            Title = "Infinity 14"
                        },
                        new
                        {
                            Uid = "ff4fb049-02c8-4b20-91b9-0c9147182657",
                            OwnerId = "user15",
                            Title = "Pegasus 15"
                        },
                        new
                        {
                            Uid = "1d71645b-7104-4bfc-816d-9f43a02ee9ab",
                            OwnerId = "user16",
                            Title = "Aurora 16"
                        },
                        new
                        {
                            Uid = "d17e7174-553a-46c9-8f3c-d8513ceeb864",
                            OwnerId = "user17",
                            Title = "Raptor 17"
                        },
                        new
                        {
                            Uid = "8d8cb1d5-bab2-44c1-8c0c-03b371493d34",
                            OwnerId = "user18",
                            Title = "Zenith 18"
                        },
                        new
                        {
                            Uid = "5c6c5e73-9461-4c38-9dcb-5f1502a2aba0",
                            OwnerId = "user19",
                            Title = "Vortex 19"
                        },
                        new
                        {
                            Uid = "b142918e-e941-4f60-9545-813f16101ea9",
                            OwnerId = "user20",
                            Title = "Spectra 20"
                        });
                });

            modelBuilder.Entity("XY56L7_SOF_2022231.Models.Motorcycle", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Uid");

                    b.HasIndex("OwnerId");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("XY56L7_SOF_2022231.Models.SiteUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wealth")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SiteUser");

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7999b68f-394a-459e-877d-1bbdb0765ff1",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "864e2fe5-de92-4262-b2fa-a35dedc11a27",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 1, 2, 3 },
                            FirstName = "Elena",
                            LastName = "Martinez",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a094c085-7123-4a4d-b6cb-ff465c824116",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de1b61f3-5189-4d11-8d81-3b8520ad1538",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 2, 3, 4 },
                            FirstName = "Victor",
                            LastName = "Smith",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6985104-1521-49b7-acf7-a1efcb5e2d5e",
                            Email = "user3@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74d86ff9-2ad9-43c5-833b-981f573d5121",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 3, 4, 5 },
                            FirstName = "Sophia",
                            LastName = "Garcia",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bedb3439-6f5b-4f96-b113-6f0df9369d65",
                            Email = "user4@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b64e3030-16ed-478f-80ab-fa623dd10677",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 4, 5, 6 },
                            FirstName = "Oliver",
                            LastName = "Johnson",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bea03b12-ae79-4630-a384-fe36c25cea42",
                            Email = "user5@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a083feb3-54b3-4c6d-a887-551371a203e2",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 5, 6, 7 },
                            FirstName = "Isabella",
                            LastName = "Rodriguez",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2761a6ef-a5db-4d39-8e18-15b8d8a21636",
                            Email = "user6@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5639618c-263c-4a2c-b4c7-fdd0b539aed9",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 6, 7, 8 },
                            FirstName = "Max",
                            LastName = "Brown",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "714178df-aafd-4d15-9f52-6feb668f4d58",
                            Email = "user7@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3681d6e9-594f-49f2-b419-ec364acd1423",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 7, 8, 9 },
                            FirstName = "Emma",
                            LastName = "Lee",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b07d8bdc-1fc7-4e0c-b798-a254db094f2a",
                            Email = "user8@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5abd512-ba42-4ce1-9ef5-02c91dbeeab7",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 8, 9, 10 },
                            FirstName = "Leo",
                            LastName = "Davis",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6871427-512f-41b5-9aa9-93334612e979",
                            Email = "user9@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e444729-a70d-41d6-9676-08ca4279f12d",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 9, 10, 11 },
                            FirstName = "Ava",
                            LastName = "Hernandez",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a7425bd-4684-4580-878b-9ccef2eed3ed",
                            Email = "user10@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e867c6f1-4420-4322-b538-d6e697a7c754",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 10, 11, 12 },
                            FirstName = "Liam",
                            LastName = "Taylor",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b43eb42-5580-4485-97ac-2a08402bc850",
                            Email = "user11@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddd7e167-e873-4c04-8b89-25b6ff5ec4eb",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 11, 12, 13 },
                            FirstName = "Mia",
                            LastName = "Clark",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0439418d-0441-41b6-8373-0581bd09d6d2",
                            Email = "user12@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5aab3d89-c70a-47af-992c-3e11c9bdbf97",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 12, 13, 14 },
                            FirstName = "Gabriel",
                            LastName = "Lewis",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b85dbde8-e943-4d88-a5a5-a113d5d2fb30",
                            Email = "user13@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8cc9d089-9a55-4518-aacc-b202d3a7cdd2",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 13, 14, 15 },
                            FirstName = "Luna",
                            LastName = "Walker",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b59d596-d78e-4506-8e63-6445b244f349",
                            Email = "user14@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "088c154d-2c74-4fd5-9a93-1b9c0ecc6877",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 14, 15, 16 },
                            FirstName = "Sebastian",
                            LastName = "Hall",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a82891ed-6399-4c51-aa75-832e85eb1f7b",
                            Email = "user15@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74c23604-457d-45ef-bc72-22c3bb30b607",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 15, 16, 17 },
                            FirstName = "Zoe",
                            LastName = "Young",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b9491b1-8169-4ab1-bc62-7e3e69e66978",
                            Email = "user16@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89e7d79c-422f-4ea0-8ae2-9e4482a2fd4b",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 16, 17, 18 },
                            FirstName = "Lucas",
                            LastName = "Hill",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b39b0e62-f116-477c-9feb-203a485bbf92",
                            Email = "user17@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a3e4747-5aff-48c2-a68c-625e550a0ddc",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 17, 18, 19 },
                            FirstName = "Chloe",
                            LastName = "Cooper",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76100233-a69c-47f4-ac5e-8321b722595c",
                            Email = "user18@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f48bd03c-27b2-46eb-8291-0843e88614a8",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 18, 19, 20 },
                            FirstName = "Mateo",
                            LastName = "Baker",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfffb6cb-ea3f-4e35-8b47-4c670e56390a",
                            Email = "user19@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12d8f133-f3d8-4948-83eb-4e4daf0c9fec",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 19, 20, 21 },
                            FirstName = "Nora",
                            LastName = "Ward",
                            Wealth = 50000
                        },
                        new
                        {
                            Id = "user20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b554f686-af01-4236-83b9-373824842642",
                            Email = "user20@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "982c4503-60ed-433d-bece-a81d42c7a26d",
                            TwoFactorEnabled = false,
                            ContentType = "",
                            Data = new byte[] { 20, 21, 22 },
                            FirstName = "Alex",
                            LastName = "Anderson",
                            Wealth = 50000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XY56L7_SOF_2022231.Models.Car", b =>
                {
                    b.HasOne("XY56L7_SOF_2022231.Models.SiteUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("XY56L7_SOF_2022231.Models.Motorcycle", b =>
                {
                    b.HasOne("XY56L7_SOF_2022231.Models.SiteUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
